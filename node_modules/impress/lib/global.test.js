"use strict";

var methodConteiner = {};
methodConteiner.method = function(obj) {
  obj.field = "value";
  return obj;
};

impress.test({
  'Function.prototype.override': [
    [
      methodConteiner.method,
      function(obj) {
        obj.data++;
        return this.inherited(obj);
      },
      function(fn) {
        methodConteiner.method = fn;
        return methodConteiner.method({ data:123 }).data === 124;
      }
    ]
  ],
  'isBrowser': [ [ [], false ] ],
  'isServer':  [ [ [], true  ] ],
  'falseness': [ [ [], false ] ],
  'isInitialized': true,
  'extend': [
    [ { f1:1 },                 { f1:1 } ],
    [ { f1:1 }, {},             { f1:1 } ],
    [ {}, {},                         {} ],
    [ {}, null,                       {} ],
    [ { f1:1 }, { f2:2 }, { f1:1, f2:2 } ],
    [ null, null,                   null ],
    [ null,                         null ],
    [ 'Hello' ,                  'Hello' ],
    [ 'Hello', { f2:2 },         'Hello' ],
    [ 2, 3,                            2 ],
    [ null, {},                     null ],
    [ [], { f2:2 },                   [] ],
    [ [], [],                         [] ],
    [ [], null,                       [] ],
    [ [], 'Hello', ['H','e','l','l','o'] ],
  ],
  'clone': [
    [ {}, {} ],
    [ [], [] ],
    [ null, null ],
    [ { f1:1 }, { f1:1 } ],
    [ { f1:1 }, { f2:2 }, { f1:1, f2:2 } ],
    [ { f1:1, sub: { f2:2, a1:[1,2] } }, { f1:1, sub:{ f2:2, a1:[1,2] } } ],
    [ { f1:1, sub: { f2:2, a1:[1,2] } }, { f3:3, a2:[3,4] }, { f1:1, sub:{ f2:2, a1:[1,2] }, f3:3, a2:[3,4] } ],
  ],
  'Array.isArray': [
    [ [ 1, 2, 3 ],  true  ],
    [ [ 'a', 'b' ], true  ],
    [ 'abcdefgh',   false ],
    [ {},           false ],
    [ null,         false ],
  ],
  'arrayDelete': [
    [ [ 'e1', 'e2' ], 'e1', 1 ],
    [ [ 'e1', 'e2' ], 'e3', 0 ],
    [ [ ], 'e3',            0 ],
    [ null, 'e3',           0 ],
    [ [ null, 'e1' ], 'e1', 1 ],
    [ [ null, 'e1' ], null, 1 ],
  ],
  'Array.prototype.indexOf': [
    [ [1, 2, 3, 2, 1],  1,  0 ],
    [ [1, 2, 3, 2, 1],  2,  1 ],
    [ [1, 2, 3, 2, 1],  3,  2 ],
    [ [1, 2, 3, 2, 1],  0, -1 ],
    [ [1, 2, 3, 2, 1], -1, -1 ],
  ],
  'Array.prototype.lastIndexOf': [
    [ [1, 2, 3, 2, 1],  1,  4 ],
    [ [1, 2, 3, 2, 1],  2,  3 ],
    [ [1, 2, 3, 2, 1],  3,  2 ],
    [ [1, 2, 3, 2, 1],  0, -1 ],
    [ [1, 2, 3, 2, 1], -1, -1 ],
  ],
  'inArray': [
    [ [1, 2, 3], 1,             true  ],
    [ [1, 2, 3], 4,             false ],
    [ ['e1', 'e2', 'e3'], 'e3', true  ],
    [ ['e1', 'e2', 'e3'], 'e4', false ],
    [ [1,null,3], null, true ]
  ],
  'String.prototype.trim': [
    [ 'abcdef',             'abcdef' ],
    [ 'abcdef   ',          'abcdef' ],
    [ '   abcdef',          'abcdef' ],
    [ '   abcdef   ',       'abcdef' ],
    [ ' a b c d e f ', 'a b c d e f' ],
  ],
  'String.prototype.ltrim': [
    [ 'abcdef',              'abcdef' ],
    [ 'abcdef   ',        'abcdef   ' ],
    [ '   abcdef',           'abcdef' ],
    [ '   abcdef   ',     'abcdef   ' ],
    [ ' a b c d e f ', 'a b c d e f ' ],
  ],
  'String.prototype.rtrim': [
    [ 'abcdef',              'abcdef' ],
    [ 'abcdef   ',           'abcdef' ],
    [ '   abcdef',        '   abcdef' ],
    [ '   abcdef   ',     '   abcdef' ],
    [ ' a b c d e f ', ' a b c d e f' ],
  ],
  'String.prototype.capitalize': [
    [ 'abc', 'Abc' ],
    [ 'Abc', 'Abc' ],
    [ 'aBC', 'Abc' ],
    [ 'ABC', 'Abc' ],
    [ 'a',     'A' ],
    [ ' bc', ' Bc' ],
    [ ' ',     ' ' ],
    [ '',       '' ],
    [ '+',     '+' ],
  ],
  'String.prototype.contains': [
    [ 'abc', 'a',     true  ],
    [ 'abc', 'b',     true  ],
    [ 'abc', 'c',     true  ],
    [ 'abc', 'ab',    true  ],
    [ 'abc', 'bc',    true  ],
    [ 'abc', 'abc',   true  ],
    [ 'abc', 'ac',    false ],
    [ 'abc', ' ',     false ],
    [ 'abc', 'abcde', false ],
    [ 'abc', '+',     false ],
    [ 'abc', '',      true  ],
  ],
  'String.prototype.startsWith': [
    [ 'abc', 'a', true  ],
    [ 'abc', 'b', false ],
    [ 'abc', 'c', false ],
    [ 'abc', ' ', false ],
    [ 'abc', '+', false ],
    [ 'abc', '' , true  ],
  ],
  'String.prototype.endsWith': [
    [ 'abc', 'a', false ],
    [ 'abc', 'b', false ],
    [ 'abc', 'c', true  ],
    [ 'abc', ' ', false ],
    [ 'abc', '+', false ],
    [ 'abc', '' , true  ],
  ],
  'String.prototype.lpad': [
    [ 'abc', ' ', 10, '       abc' ],
    [ 'abc', '+',  4,       '+abc' ],
    [ 'abc', '+',  1,        'abc' ],
    [ 'abc', '+',  0,        'abc' ],
    [ 'abc', '+', -1,        'abc' ],
  ],
  'String.prototype.rpad': [
    [ 'abc', ' ', 10, 'abc       ' ],
    [ 'abc', '+',  4,       'abc+' ],
    [ 'abc', '+',  1,        'abc' ],
    [ 'abc', '+',  0,        'abc' ],
    [ 'abc', '+', -1,        'abc' ],
  ],
  'String.prototype.between': [
    [ 'abcdefghijk', 'cd', 'h',            'efg' ],
    [ 'field="value"', '"', '"',         'value' ],
    [ 'field:"value"', '"', '"',         'value' ],
    [ 'field[value]', '[', ']',          'value' ],
    [ 'kjihgfedcba', 'cd', 'h',               '' ],
    [ 'kjihgfedcba', 'dc', 'h',               '' ],
    [ 'field="value"', '=', '=',              '' ],
    [ 'field[value]', '{', '}',               '' ],
    [ '{a:"b",c:"d"}', '"', '"',             'b' ],
  ],
  "Date.prototype.toISOString": [
    [ new Date('2012-01-01T12:30:15.120Z'), '2012-01-01T12:30:15.120Z' ],
    [ new Date('1990-01-01T12:30:15.120Z'), '1990-01-01T12:30:15.120Z' ],
    [ new Date('2012-01-01T12:30:15.120'),  '2012-01-01T12:30:15.120Z' ],
    [ new Date('2012-01-01T12:30:15'),      '2012-01-01T12:30:15.000Z' ],
    [ new Date('2012-01-01T12:30'),         '2012-01-01T12:30:00.000Z' ],
    [ new Date('2012-01-01'),               '2012-01-01T00:00:00.000Z' ],
  ],
  "Date.prototype.toSimpleString": [
    [ new Date('2012-01-01T12:30:15.120Z'), '2012-01-01 12:30' ],
    [ new Date('2012-01-01T12:30:15.120'),  '2012-01-01 12:30' ],
    [ new Date('2012-01-01T12:30:15'),      '2012-01-01 12:30' ],
    [ new Date('2012-01-01T12:30'),         '2012-01-01 12:30' ],
    [ new Date('2012-01-01'),               '2012-01-01 00:00' ],
  ],
  'duration': [
    [ '1d',             86400000 ],
    [ '10h',            36000000 ],
    [ '7m',               420000 ],
    [ '13s',               13000 ],
    [ '2d 43s',        172843000 ],
    [ '5d 17h 52m 1s', 496321000 ],
    [ '1s',                 1000 ],
    [ 500,                   500 ],
    [ 0,                       0 ],
    [ '',                      0 ],
    [ '15',                    0 ],
    [ '10q',                   0 ],
  ],
  'generateKey': [
    [ 4, 'ABC', function(value) { return (value.length === 4); } ],
    [ 8, 'A',                                         'AAAAAAAA' ],
  ],
  'generateGUID': [
    [ function(value) { return (value.length === 36); } ],
  ],
  'ip2int': [
    [ '127.0.0.1',        2130706433 ],
    [ '10.0.0.1',          167772161 ],
    [ '192.168.1.10',    -1062731510 ],
    [ '165.225.133.150', -1511946858 ],
    [ '0.0.0.0',                   0 ],
    [ 'wrong-string',           null ],
    [ '',                 2130706433 ],
  ],
  'escapeRegExp': [
    [ '/path/to/res?search=this.that&a=b', '\\\\/path\\\\/to\\\\/res\\\\?search=this\\\\.that&a=b' ],
    [ '/path/to/res?search=this.that',         '\\\\/path\\\\/to\\\\/res\\\\?search=this\\\\.that' ],
    [ '/path/to/res?search',                                 '\\\\/path\\\\/to\\\\/res\\\\?search' ],
    [ '/path/to/res',                                                   '\\\\/path\\\\/to\\\\/res' ],
    [ '/path',                                                                         '\\\\/path' ],
  ],
  'trailingSlash': [
    [ '/path',   '/path/' ],
    [ '/path/',  '/path/' ],
    [ '/',            '/' ],
    [ '',             '/' ],
  ],
  'stripTrailingSlash': [
    [ '/path',   '/path' ],
    [ '/path/',  '/path' ],
    [ '/',            '' ],
    [ '',             '' ],
  ],
  'isScalar': [
    [ 'value1', true  ],
    [ 50,       true  ],
    [ true,     true  ],
    [ null,     false ],
    [ [],       false ],
    [ {},       false ],
    [ '',       true  ],
  ],
  'random': [
    [  0, 10, function(result) { return (result>=0  && result<=10); } ],
    [  1, 10, function(result) { return (result>=1  && result<=10); } ],
    [ -1, 10, function(result) { return (result>=-1 && result<=10); } ],
    [ 10, 0,  function(result) { return (result>=0  && result<=10); } ],
    [ 10, 10, 10 ],
  ],
  'shuffle': [
    [ [1,2,3],   function(result) { return JSON.stringify(result.sort()) === '[1,2,3]'; }   ],
    [ ['a','b'], function(result) { return JSON.stringify(result.sort()) === '["a","b"]'; } ],
    [ [1,'a',3], function(result) { return JSON.stringify(result.sort()) === '[1,3,"a"]'; } ],
    [ [],        function(result) { return JSON.stringify(result.sort()) === '[]'; }        ],
  ],
  'bytesToSize': [
    [                         0, '0'      ],
    [                         1, '1'      ],
    [                       100, '100'    ],
    [                       999, '999'    ],
    [                      1000, '1 Kb'   ],
    [                      1023, '1 Kb'   ],
    [                      1024, '1 Kb'   ],
    [                      1025, '1 Kb'   ],
    [                      1111, '1 Kb'   ],
    [                      2222, '2 Kb'   ],
    [                     10000, '10 Kb'  ],
    [                   1000000, '1 Mb'   ],
    [                 100000000, '100 Mb' ],
    [               10000000000, '10 Gb'  ],
    [             1000000000000, '1 Tb'   ],
    [           100000000000000, '100 Tb' ],
    [         10000000000000000, '10 Pb'  ],
    [       1000000000000000000, '1 Eb'   ],
    [     100000000000000000000, '100 Eb' ],
    [   10000000000000000000000, '10 Zb'  ],
    [ 1000000000000000000000000, '1 Yb'   ],
  ],
  'sizeToBytes': [
    [        0,                         0 ],
    [      '0',                         0 ],
    [      '1',                         1 ],
    [      512,                       512 ],
    [    '100',                       100 ],
    [    '999',                       999 ],
    [   '1 Kb',                      1000 ],
    [   '2 Kb',                      2000 ],
    [  '10 Kb',                     10000 ],
    [   '1 Mb',                   1000000 ],
    [ '100 Mb',                 100000000 ],
    [  '10 Gb',               10000000000 ],
    [   '1 Tb',             1000000000000 ],
    [ '100 Tb',           100000000000000 ],
    [  '10 Pb',         10000000000000000 ],
    [   '1 Eb',       1000000000000000000 ],
    [ '100 Eb',     100000000000000000000 ],
    [  '10 Zb',   10000000000000000000000 ],
    [   '1 Yb', 1000000000000000000000000 ],
  ],
});
